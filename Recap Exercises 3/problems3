def no_dupes?(arr)
    arr.select { |e| arr.count(e) == 1}
end

# p no_dupes?([1, 1, 2, 1, 3, 2, 4])  
# p no_dupes?(['x', 'x', 'y', 'z', 'z'])
# p no_dupes?([true, true, true])            # => []

def no_consecutive_repeats?(arr)
    (0...arr.length).each {|i| return false if arr[i] == arr[i+1]}
    true
end

# p no_consecutive_repeats?(['cat', 'dog', 'mouse', 'dog'])     # => true
# p no_consecutive_repeats?(['cat', 'dog', 'dog', 'mouse'])     # => false
# p no_consecutive_repeats?([10, 42, 3, 7, 10, 3])              # => true
# p no_consecutive_repeats?([10, 42, 3, 3, 10, 3])              # => false
# p no_consecutive_repeats?(['x'])                              # => true

def char_indices(str)
    h = Hash.new {|h,k| h[k] = []}
    str.each_char.with_index {|c,i| h[c] << i}
    h
end

# p char_indices('mississippi')   # => {"m"=>[0], "i"=>[1, 4, 7, 10], "s"=>[2, 3, 5, 6], "p"=>[8, 9]}
# p char_indices('classroom')     # => {"c"=>[0], "l"=>[1], "a"=>[2], "s"=>[3, 4], "r"=>[5], "o"=>[6, 7], "m"=>[8]}

def longest_streak(str)
    h = Hash.new(0)
    str.each_char {|c| h[c] += 1}
    c = h.sort_by {|k,v| v}
    p c[-1][0] * c[-1][1]
end

# longest_streak('a')           # => 'a'
# longest_streak('accccbbb')    # => 'cccc'
# longest_streak('aaaxyyyyyzz') # => 'yyyyy
# longest_streak('aaabbb')      # => 'bbb'
# longest_streak('abc')         # => 'c'

def bi_prime?(num)
    arr = []
    (2...num).each {|n| arr << n if prime?(n)}
    arr.each do |e|
        arr.each do |e2|
            return true if e * e2 == num
        end
    end
    false
end

def prime?(num)
    (2...num).each {|n| return false if num % n == 0}
    true
end

# p bi_prime?(14)   # => true
# p bi_prime?(22)   # => true
# p bi_prime?(25)   # => true
# p bi_prime?(94)   # => true
# p bi_prime?(24)   # => false
# p bi_prime?(64)   # => false

def vigenere_cipher(str, keys)
    alpha = "abcdefghijklmnopqrstuvwxyz"
    (0...str.length).each do |i|
        str[i] = alpha[(alpha.index(str[i]) + (keys[i % keys.length])) % 26]
    end
    p str
end

vigenere_cipher("toerrishuman", [1])        # => "upfssjtivnbo"
vigenere_cipher("toerrishuman", [1, 2])     # => "uqftsktjvobp"
vigenere_cipher("toerrishuman", [1, 2, 3])  # => "uqhstltjxncq"
vigenere_cipher("zebra", [3, 0])            # => "ceerd"
vigenere_cipher("yawn", [5, 1])             # => "dbbo"

